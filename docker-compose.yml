
services:
  db:
    image: postgres:16
    container_name: ${DB_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:${DB_PORT}" # Quitar en produccion
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - redroosters_audio:/app/uploads/audio


  backend:
    build:
      context: ./backend
    container_name: backend
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACK_PORT: ${BACK_PORT}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      AUDIO_DIR: /app/uploads/audio
    ports:
      - "${BACK_PORT}:${BACK_PORT}"
    volumes:
      - redroosters_audio:/app/uploads/audio
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev # Desarrollo
      target: dev # Desarrollo
    container_name: frontend
    ports:
      - "${FRONT_PORT}:${FRONT_PORT}"
    expose:
      - "80" # Nginx
    environment:
      PUBLIC_API_URL: "${PUBLIC_API_URL}"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Evita sobrescribir las dependencias del contenedor
    depends_on:
      - backend

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"  
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redroosters_audio:

